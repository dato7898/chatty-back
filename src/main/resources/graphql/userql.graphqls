type User {
    id: ID,
    email: String,
    firstname: String,
    lastname: String,
    googleImgUrl: String,
    roles: [String],
    friendIds: [String]
}

type Message {
    id: ID,
    senderId: String,
    roomId: String,
    text: String
}

type Room {
    id: ID,
    userIds: [String],
    isMultiChat: Boolean
}

input MetaMessage {
    text: String
}

type Query {
    me: User,
    myFriends(pageNum: Int, pageSize: Int): [User],
    friendsById(id: ID, pageNum: Int, pageSize: Int): [User]
    friendRequests(pageNum: Int, pageSize: Int): [User],
    usersBySearch(search: String, pageNum: Int, pageSize: Int): [User]

    roomByUserId(userId: String): Room

    messagesByUserId(userId: String, pageNum: Int, pageSize: Int): [Message]
}

type Mutation {
    addFriend(userId: ID): User,
    deleteFriend(userId: ID): User

    addMessageToUser(message: MetaMessage, userId: String): Message
}